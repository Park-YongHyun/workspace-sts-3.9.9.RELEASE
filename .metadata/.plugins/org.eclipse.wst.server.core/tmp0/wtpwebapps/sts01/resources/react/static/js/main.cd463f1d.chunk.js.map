{"version":3,"sources":["logo.svg","pages/Home.js","pages/Board.js","pages/Member.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","href","Component","Board","state","no","title","axios","get","then","res","console","log","data","setState","BRD_NO","BRD_TITLE","catch","error","this","Member","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iJAAAA,EAAOC,QAAU,IAA0B,kC,yKCgB5BC,E,iLAXP,OACI,6BACI,qEAEA,uBAAGC,KAAK,SAAR,sBACA,uBAAGA,KAAK,UAAR,qB,GAPGC,a,iBC8BJC,E,2MA3BXC,MAAQ,CACJC,GAAK,GACLC,MAAQ,I,mFAIQ,IAAD,OACfC,IAAMC,IAAI,mDAAmDC,KAAK,SAAAC,GAC9DC,QAAQC,IAAIF,EAAIG,MAChB,EAAKC,SAAU,CAACT,GAAIK,EAAIG,KAAKE,OAAQT,MAAQI,EAAIG,KAAKG,cAEzDC,MAAM,SAASC,GACZP,QAAQC,IAAI,wCAAYM,O,+BAK5B,OACI,6BACI,kDACA,mDAAUC,KAAKf,MAAMC,IACrB,6CAASc,KAAKf,MAAME,Y,GAvBhBJ,aCSLkB,E,iLARP,OACI,6BACI,gF,GAJKlB,aCsBNmB,MAbf,WACE,OACI,kBAAC,IAAD,KACE,+DACA,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjC,kBAAC,IAAD,CAAOuB,KAAK,SAASC,UAAWrB,IAChC,kBAAC,IAAD,CAAOoB,KAAK,UAAUC,UAAWJ,OCPvBK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.cd463f1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>홈화면입니다.</h4>    \r\n\r\n                <a href=\"board\">게시판</a>\r\n                <a href=\"member\">회원</a>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\n//npm install axios --save\r\nimport axios from 'axios';\r\n\r\nclass Board extends Component{\r\n    \r\n    state = {\r\n        no : '',\r\n        title : ''\r\n    }\r\n\r\n    //생명주기 발생시 STS의 RESTful에 접근해서 정보를 가져옴.\r\n    componentDidMount(){\r\n        axios.get('http://192.168.1.224:8080/web/boardc.json?no=11').then(res => {\r\n            console.log(res.data);\r\n            this.setState( {no: res.data.BRD_NO, title : res.data.BRD_TITLE});\r\n        })\r\n        .catch(function(error){\r\n            console.log('에러가 발생함' + error);\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h3>게시판</h3>    \r\n                <p>글번호 : {this.state.no}</p>\r\n                <p>제목 : {this.state.title}</p>\r\n            </div>\r\n        );            \r\n    }\r\n}\r\n\r\nexport default Board;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Member extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h4>멤버화면입니다.</h4>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Member;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n//npm install react-router-dom --save\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\n\n//직접만든 페이지 3개 import\nimport Home from \"./pages/Home\";\nimport Board from './pages/Board';\nimport Member from './pages/Member';\n\nfunction App() {\n  return (\n      <Router>\n        <h3>라우트 실습</h3>\n        <div>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/board\" component={Board} />\n          <Route path=\"/member\" component={Member} />\n        </div>\n      </Router>  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}