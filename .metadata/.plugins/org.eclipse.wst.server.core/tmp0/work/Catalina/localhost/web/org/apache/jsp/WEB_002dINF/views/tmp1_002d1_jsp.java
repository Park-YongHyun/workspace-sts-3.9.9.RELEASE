/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.22
 * Generated at: 2019-08-25 01:18:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class tmp1_002d1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>tmp1-1</title>\r\n");
      out.write("\t<script src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<input id=\"front\" type=\"text\" /><br />\r\n");
      out.write("\t<input id=\"back\" type=\"text\" /><br />\r\n");
      out.write("\t\r\n");
      out.write("\t<button onclick=\"btnchck();\">답 보기</button>\r\n");
      out.write("\t<button onclick=\"btn1();\">O</button>\r\n");
      out.write("\t<button onclick=\"btn2();\">?</button>\r\n");
      out.write("\t<button onclick=\"btn3();\">X</button>\r\n");
      out.write("\t<button onclick=\"btnnext();\">다음</button>\r\n");
      out.write("\r\n");
      out.write("\t<br /><br /><button onclick=\"btntest();\">테스트용 버튼</button>\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar userId = \"id 입력 필요\";\r\n");
      out.write("\t\tvar cardNo;\r\n");
      out.write("\t\tvar data;\r\n");
      out.write("\t\tvar rand;\r\n");
      out.write("\t\tvar chck1 = 0;\r\n");
      out.write("\t\t$(() => { // 데이터 베이스 가져오기\r\n");
      out.write("\t\t\t// $.get('http://127.0.0.1:3000/tmp1/11', function(retdata){ // get 방식\r\n");
      out.write("\t\t\t// \tdata = retdata;\r\n");
      out.write("\t\t\t// \tconsole.log(data);\r\n");
      out.write("\t\t\t// \tbtnnext();\r\n");
      out.write("\t\t\t// },'json');\r\n");
      out.write("\t\t\t$.post( \"http://127.0.0.1:3000/tmp1/1\", {  // post 방식\r\n");
      out.write("\t\t\t\tsql: \"SELECT * FROM QUIZCARD\" \r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("  \t\t\t.done(function(retdata) {\r\n");
      out.write("\t\t\t\tdata = retdata.rows;\r\n");
      out.write("\t\t\t\tconsole.log(data);\r\n");
      out.write("\t\t\t\tbtnnext();\r\n");
      out.write("  \t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tfunction btnchck() {\r\n");
      out.write("\t\t\tchck();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction btn1() { // O\r\n");
      out.write("\t\t\tchck1 = 2;\r\n");
      out.write("\t\t\tchck();\r\n");
      out.write("\t\t\tnext();\r\n");
      out.write("\t\t\tsend1();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction btn2() { // ?\r\n");
      out.write("\t\t\tchck1 = 1;\r\n");
      out.write("\t\t\tchck();\r\n");
      out.write("\t\t\tnext();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction btn3() { // X\r\n");
      out.write("\t\t\tchck1 = -1;\r\n");
      out.write("\t\t\tchck();\r\n");
      out.write("\t\t\tnext();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction btnnext() {\r\n");
      out.write("\t\t\tnext();\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction btntest() { // 테스트용 버튼\r\n");
      out.write("\t\t\ttest1();\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction chck() {\r\n");
      out.write("\t\t\tif(chck1 !== 0){\r\n");
      out.write("\t\t\t\t$('#back').val(data[rand][3]); // 답 보기\r\n");
      out.write("\t\t\t\tdata.splice(rand,1); // 카드 제거\r\n");
      out.write("\t\t\t\tchck1 = 0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction next() {\r\n");
      out.write("\t\t\tvar len = data.length;\r\n");
      out.write("\t\t\tif(len === 0){\r\n");
      out.write("\t\t\t\tlocation.replace(\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/1\"); // 카드가 없으면 특정 페이지로 이동\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\trand = Math.floor(Math.random() * len); // 랜덤\r\n");
      out.write("\t\t\tcardNo = data[rand][1];\r\n");
      out.write("\t\t\t$('#front').val(data[rand][2]); // 다음 카드\r\n");
      out.write("\t\t\t$('#back').val(\"\");\r\n");
      out.write("\t\t\tchck1 = 1;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction send1() {\r\n");
      out.write("\t\t\t$.post( \"http://127.0.0.1:3000/tmp1/2\", { userId:userId, cardNo:cardNo, val:chck1 });\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\tfunction test1(){\r\n");
      out.write("\t\t\tvar tmp;\r\n");
      out.write("\t\t\tconsole.log(\"테스트용 버튼\");\r\n");
      out.write("\t\t\t$.post( \"http://127.0.0.1:3000/tmp1/1\", { \r\n");
      out.write("\t\t\t\tsql: \"SELECT * FROM QUIZCARD\"\r\n");
      out.write("\t\t\t\t})\r\n");
      out.write("  \t\t\t.done(function( retdata ) {\r\n");
      out.write("\t\t\t\tconsole.log(retdata);\r\n");
      out.write("\t\t\t\ttmp = retdata.rows.length + 1;\r\n");
      out.write("\t\t\t\tconsole.log(tmp);\r\n");
      out.write("\t\t\t\tvar i = 0;\r\n");
      out.write("\t\t\t\tvar fn1 = setInterval(() => {\r\n");
      out.write("\t\t\t\t\t$.post( \"http://127.0.0.1:3000/tmp1/1\", { \r\n");
      out.write("\t\t\t\t\t\tsql: \"INSERT INTO QUIZCARD VALUES(\"+(tmp+i)+\", 'id\"+(tmp+i)+\"', 'front\"+(tmp+i)+\"', 'back\"+(tmp+i)+\"', 0)\"\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t.done(function( retdata ) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(retdata);\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\tconsole.log(i);\r\n");
      out.write("\t\t\t\t\ti++;\r\n");
      out.write("\t\t\t\t\tif(i === 6){\r\n");
      out.write("\t\t\t\t\t\tclearInterval(fn1);\r\n");
      out.write("\t\t\t\t\t\tconsole.log(\"ci\");\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}, 1000);\r\n");
      out.write("  \t\t\t});\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
